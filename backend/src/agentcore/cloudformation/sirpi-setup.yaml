AWSTemplateFormatVersion: "2010-09-09"
Description: "Sirpi AWS Setup - Creates resources for infrastructure automation"

Parameters:
  SirpiAccountId:
    Type: String
    Description: "Sirpi AWS Account ID (provided during setup)"
    Default: "183129768772"

  ExternalId:
    Type: String
    Description: "Unique external ID for security (provided during setup)"
    NoEcho: true

Resources:
  # S3 Bucket for Terraform State
  TerraformStateBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "sirpi-terraform-states-${AWS::AccountId}"
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 90
      Tags:
        - Key: ManagedBy
          Value: Sirpi
        - Key: Purpose
          Value: TerraformState

  # DynamoDB Table for State Locking
  TerraformLockTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: sirpi-terraform-locks
      AttributeDefinitions:
        - AttributeName: LockID
          AttributeType: S
      KeySchema:
        - AttributeName: LockID
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: ManagedBy
          Value: Sirpi
        - Key: Purpose
          Value: TerraformLocking

  # IAM Role that Sirpi assumes to manage resources
  SirpiExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SirpiInfrastructureAutomationRole
      Description: "Allows Sirpi to deploy infrastructure in this AWS account"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${SirpiAccountId}:root"
            Action: "sts:AssumeRole"
            Condition:
              StringEquals:
                "sts:ExternalId": !Ref ExternalId
      ManagedPolicyArns:
        - !Ref SirpiInfrastructurePolicy
      Tags:
        - Key: ManagedBy
          Value: Sirpi

  # Custom IAM Policy with least-privilege permissions
  SirpiInfrastructurePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: SirpiInfrastructureDeploymentPolicy
      Description: "Permissions for Sirpi to deploy and manage infrastructure"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          # VPC and Networking
          - Sid: VPCManagement
            Effect: Allow
            Action:
              - ec2:CreateVpc
              - ec2:DeleteVpc
              - ec2:DescribeVpcs
              - ec2:ModifyVpcAttribute
              - ec2:DescribeVpcAttribute
              - ec2:CreateSubnet
              - ec2:DeleteSubnet
              - ec2:DescribeSubnets
              - ec2:ModifySubnetAttribute
              - ec2:CreateInternetGateway
              - ec2:AttachInternetGateway
              - ec2:DetachInternetGateway
              - ec2:DeleteInternetGateway
              - ec2:DescribeInternetGateways
              - ec2:CreateRouteTable
              - ec2:DeleteRouteTable
              - ec2:AssociateRouteTable
              - ec2:DisassociateRouteTable
              - ec2:CreateRoute
              - ec2:DeleteRoute
              - ec2:DescribeRouteTables
              - ec2:CreateNatGateway
              - ec2:DeleteNatGateway
              - ec2:DescribeNatGateways
              - ec2:AllocateAddress
              - ec2:ReleaseAddress
              - ec2:DescribeAddresses
              - ec2:DescribeAddressesAttribute
              - ec2:DescribeAvailabilityZones
              - ec2:DescribeAccountAttributes
              - ec2:DescribeNetworkInterfaces
              - ec2:CreateTags
              - ec2:DeleteTags
              - ec2:DisassociateAddress
            Resource: "*"

          # Security Groups
          - Sid: SecurityGroupManagement
            Effect: Allow
            Action:
              - ec2:CreateSecurityGroup
              - ec2:DeleteSecurityGroup
              - ec2:DescribeSecurityGroups
              - ec2:DescribeSecurityGroupRules
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:AuthorizeSecurityGroupEgress
              - ec2:RevokeSecurityGroupIngress
              - ec2:RevokeSecurityGroupEgress
              - ec2:UpdateSecurityGroupRuleDescriptionsIngress
              - ec2:UpdateSecurityGroupRuleDescriptionsEgress
              - ec2:GetSecurityGroupsForVpc
            Resource: "*"

          # ECS Fargate
          - Sid: ECSManagement
            Effect: Allow
            Action:
              - ecs:CreateCluster
              - ecs:DeleteCluster
              - ecs:DescribeClusters
              - ecs:UpdateCluster
              - ecs:RegisterTaskDefinition
              - ecs:DeregisterTaskDefinition
              - ecs:DescribeTaskDefinition
              - ecs:CreateService
              - ecs:UpdateService
              - ecs:DeleteService
              - ecs:DescribeServices
              - ecs:ListServices
              - ecs:ListTasks
              - ecs:DescribeTasks
              - ecs:TagResource
              - ecs:UntagResource
              - ecs:ListTagsForResource
            Resource: "*"

          # Application Load Balancer
          - Sid: ALBManagement
            Effect: Allow
            Action:
              - elasticloadbalancing:CreateLoadBalancer
              - elasticloadbalancing:DeleteLoadBalancer
              - elasticloadbalancing:DescribeLoadBalancers
              - elasticloadbalancing:ModifyLoadBalancerAttributes
              - elasticloadbalancing:DescribeLoadBalancerAttributes
              - elasticloadbalancing:CreateTargetGroup
              - elasticloadbalancing:DeleteTargetGroup
              - elasticloadbalancing:DescribeTargetGroups
              - elasticloadbalancing:ModifyTargetGroupAttributes
              - elasticloadbalancing:DescribeTargetGroupAttributes
              - elasticloadbalancing:CreateListener
              - elasticloadbalancing:DeleteListener
              - elasticloadbalancing:DescribeListeners
              - elasticloadbalancing:ModifyListener
              - elasticloadbalancing:AddTags
              - elasticloadbalancing:RemoveTags
              - elasticloadbalancing:DescribeTags
              - elasticloadbalancing:RegisterTargets
              - elasticloadbalancing:DeregisterTargets
              - elasticloadbalancing:DescribeTargetHealth
              - elasticloadbalancing:DescribeListenerAttributes
              - elasticloadbalancing:ModifyTargetGroup
            Resource: "*"

          # ECR - Container Registry
          - Sid: ECRManagement
            Effect: Allow
            Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - ecr:DescribeImages
              - ecr:DescribeRepositories
              - ecr:ListImages
              - ecr:CreateRepository
              - ecr:DeleteRepository
              - ecr:PutImage
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
              - ecr:ListTagsForResource
              - ecr:TagResource
              - ecr:UntagResource
            Resource: "*"

          # IAM Role Management - Scoped to application roles
          - Sid: IAMRoleManagement
            Effect: Allow
            Action:
              - iam:CreateRole
              - iam:DeleteRole
              - iam:GetRole
              - iam:UpdateRole
              - iam:AttachRolePolicy
              - iam:DetachRolePolicy
              - iam:ListAttachedRolePolicies
              - iam:ListRolePolicies
              - iam:PutRolePolicy
              - iam:DeleteRolePolicy
              - iam:GetRolePolicy
              - iam:PassRole
              - iam:TagRole
              - iam:UntagRole
              - iam:ListRoleTags
              - iam:ListInstanceProfilesForRole
            Resource:
              - !Sub "arn:aws:iam::${AWS::AccountId}:role/*-ecs-*"
              - !Sub "arn:aws:iam::${AWS::AccountId}:role/*-task-*"
              - !Sub "arn:aws:iam::${AWS::AccountId}:role/*-execution-*"

          # IAM Service-Linked Roles
          - Sid: IAMServiceLinkedRoles
            Effect: Allow
            Action:
              - iam:CreateServiceLinkedRole
              - iam:DeleteServiceLinkedRole
              - iam:GetServiceLinkedRoleDeletionStatus
            Resource:
              - "arn:aws:iam::*:role/aws-service-role/elasticloadbalancing.amazonaws.com/*"
              - "arn:aws:iam::*:role/aws-service-role/ecs.amazonaws.com/*"

          # IAM Policy Management
          - Sid: IAMPolicyManagement
            Effect: Allow
            Action:
              - iam:CreatePolicy
              - iam:DeletePolicy
              - iam:GetPolicy
              - iam:GetPolicyVersion
              - iam:ListPolicyVersions
              - iam:CreatePolicyVersion
              - iam:DeletePolicyVersion
            Resource:
              - !Sub "arn:aws:iam::${AWS::AccountId}:policy/*-ecs-*"
              - !Sub "arn:aws:iam::${AWS::AccountId}:policy/*-task-*"

          # CloudWatch Logs
          - Sid: CloudWatchLogs
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:DeleteLogGroup
              - logs:DescribeLogGroups
              - logs:PutRetentionPolicy
              - logs:TagResource
              - logs:UntagResource
              - logs:TagLogGroup
              - logs:ListTagsForResource
              - logs:ListTagsLogGroup
            Resource: "*"

          # S3 State Management
          - Sid: StateManagement
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
              - s3:ListBucket
              - s3:GetObjectVersion
              - s3:ListBucketVersions
              - s3:DeleteObjectVersion
            Resource:
              - !GetAtt TerraformStateBucket.Arn
              - !Sub "${TerraformStateBucket.Arn}/*"

          # DynamoDB State Locking
          - Sid: StateLocking
            Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
            Resource: !GetAtt TerraformLockTable.Arn

Outputs:
  RoleArn:
    Description: "IAM Role ARN for Sirpi to assume"
    Value: !GetAtt SirpiExecutionRole.Arn
    Export:
      Name: SirpiExecutionRoleArn

  ExternalId:
    Description: "External ID for secure role assumption"
    Value: !Ref ExternalId

  TerraformStateBucket:
    Description: "S3 Bucket for Terraform state storage"
    Value: !Ref TerraformStateBucket
    Export:
      Name: SirpiTerraformStateBucket

  TerraformLockTable:
    Description: "DynamoDB table for Terraform state locking"
    Value: !Ref TerraformLockTable
    Export:
      Name: SirpiTerraformLockTable

  SetupInstructions:
    Description: "Next steps"
    Value: "Copy the RoleArn and provide it to Sirpi to complete AWS account connection"
